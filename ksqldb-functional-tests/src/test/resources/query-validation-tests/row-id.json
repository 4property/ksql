{
  "comments": [
    "Tests covering ROWID pseudocolumn"
  ],
  "tests": [
    {
      "name": "create ROWID sink user columns as STRINGs",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE STREAM input (id INT KEY, val STRING, other_val STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT id, val AS ROWID FROM input;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "`ROWID` is a reserved column name. You cannot use it as an alias for a column."
      }
    },
    {
      "name": "test ROWID sink user columns with pseudocolumn data types",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE STREAM input (id INT KEY, val INTEGER, other_val BIGINT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT id, val AS ROWID FROM input;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "`ROWID` is a reserved column name. You cannot use it as an alias for a column."
      }
    },
    {
      "name": "create ROWID source user columns as STRINGs",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE STREAM input (id INT KEY, ROWID string) WITH (kafka_topic='test_topic', value_format='JSON');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "'ROWID' is a reserved column name. You cannot use it as a name for a column."
      }
    },
    {
      "name": "test ROWID source user columns with pseudocolumn data types",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE STREAM input (id INT KEY, ROWID INTEGER) WITH (kafka_topic='test_topic', value_format='JSON');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "'ROWID' is a reserved column name. You cannot use it as a name for a column."
      }
    },
    {
      "name": "INSERT INTO ROWID should fail",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE STREAM a (id INT KEY, val INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM b (id INT KEY) WITH (kafka_topic='test_topic_2', value_format='JSON');",
        "INSERT INTO a SELECT id, ROWID from b EMIT CHANGES;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Reserved column name in select: `ROWID`. Please remove or alias the column."
      }
    },
    {
      "name": "Select ROWID columns with aliases - stream",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE STREAM input (id INT KEY, foo STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM output AS SELECT id, ROWID AS ri, ROWTIME AS rt FROM input;"
      ],
      "inputs": [
        {"topic":  "test_topic", "key": 1, "value": {"foo": "a"}, "timestamp": 5},
        {"topic":  "test_topic", "key": 2, "value": {"foo": "b"}, "timestamp": 6},
        {"topic":  "test_topic", "key": 3, "value": {"foo": "c"}, "timestamp":  7}
      ],
      "outputs": [
        {"topic":  "OUTPUT", "key": 1, "value": {"RI": "AAAAAQ==", "RT": 5}, "timestamp": 5},
        {"topic":  "OUTPUT", "key": 2, "value": {"RI": "AAAAAg==", "RT": 6}, "timestamp": 6},
        {"topic":  "OUTPUT", "key": 3, "value": {"RI": "AAAAAw==", "RT": 7}, "timestamp": 7}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "ID INT KEY, RI BYTES, RT BIGINT"}
        ]
      }
    },
    {
      "name": "Select ROWID with aliases - table",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE TABLE input (id INT PRIMARY KEY, foo STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE TABLE output AS SELECT id, ROWID AS ri FROM input;"
      ],
      "inputs": [
        {"topic":  "test_topic", "key": 1, "value": {"foo": "a"}, "timestamp": 5},
        {"topic":  "test_topic", "key": 2, "value": {"foo": "b"}, "timestamp": 6},
        {"topic":  "test_topic", "key": 3, "value": {"foo": "c"}, "timestamp":  7}
      ],
      "outputs": [
        {"topic":  "OUTPUT", "key": 1, "value": {"RI": "AAAAAQ=="}, "timestamp": 5},
        {"topic":  "OUTPUT", "key": 2, "value": {"RI": "AAAAAg=="}, "timestamp": 6},
        {"topic":  "OUTPUT", "key": 3, "value": {"RI": "AAAAAw=="}, "timestamp": 7}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "schema": "ID INT KEY, RI BYTES"}
        ]
      }
    },
    {
      "name": "join on ROWID",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE STREAM a (id STRING KEY, foo STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM b (id STRING KEY, bar STRING) WITH (kafka_topic='test_topic_2', value_format='JSON');",
        "CREATE STREAM output AS SELECT foo, bar, a.ROWID AS ria, b.ROWID as rib FROM a JOIN b WITHIN 5 SECONDS ON a.ROWID = b.ROWID;"
      ],
      "inputs": [
        {"topic":  "test_topic", "key": "z", "value": {"foo": "a"}, "timestamp": 5},
        {"topic":  "test_topic", "key": "z", "value": {"foo": "b"}, "timestamp": 6},
        {"topic":  "test_topic_2", "key": "z", "value": {"bar": "c"}, "timestamp":  7}
      ],
      "outputs": [
        {"topic":  "OUTPUT", "key": "z", "value": {"foo": "a", "bar": "c", "rib": "eg=="}, "timestamp": 7},
        {"topic":  "OUTPUT", "key": "z", "value": {"foo":  "b", "bar": "c", "rib": "eg=="}, "timestamp": 7}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "RIA BYTES KEY, FOO STRING, BAR STRING, RIB BYTES"}
        ]
      }
    },
    {
      "name": "CAST ROWID",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE STREAM input (id STRING KEY, foo STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM output AS SELECT id, CAST(ROWID AS STRING) AS ri FROM input;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Invalid Select: Cast of BYTES to STRING is not supported."
      }
    },
    {
      "name": "Should fail if select ROWID without aliases",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE STREAM input (id INT KEY, foo STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM output AS SELECT id, ROWID FROM input;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Reserved column name in select: `ROWID`. Please remove or alias the column."
      }
    },
    {
      "name": "Filter using ROWID",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE STREAM TEST (ID INT KEY, a BYTES, b BYTES) WITH (kafka_topic='test', value_format='JSON');",
        "CREATE STREAM TEST2 AS SELECT ID, ROWID AS RESULT FROM TEST WHERE ROWID BETWEEN a AND b;"
      ],
      "inputs": [
        {"topic": "test","key": 0, "value": {"A": "AAAAAQ==", "B": "AAAAAQ=="}},
        {"topic": "test","key": 1, "value": {"A": "AAAAAQ==", "B": "AAAAAQ=="}},
        {"topic": "test","key": 2, "value": {"A": "AAAAAQ==", "B": "AAAAAg=="}},
        {"topic": "test","key": 3, "value": {"A": "AAAAAQ==", "B": "AAAAAg=="}},
        {"topic": "test","key": 3, "value": {"A": "AAAAAQ==", "B": "AAAAAw=="}},
        {"topic": "test","key": 4, "value": {"A": "AAAAAQ==", "B": "AAAAAw=="}}
      ],
      "outputs": [
        {"topic": "TEST2", "key": 1,"value": {"RESULT": "AAAAAQ=="}},
        {"topic": "TEST2", "key": 2,"value": {"RESULT": "AAAAAg=="}},
        {"topic": "TEST2", "key": 3,"value": {"RESULT": "AAAAAw=="}}
      ]
    },
    {
      "name": "GROUP BY ROWID",
      "properties": {
        "ksql.rowid.enabled": true
      },
      "statements": [
        "CREATE STREAM L (A STRING KEY, B INT) WITH (kafka_topic='LEFT', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT COUNT(B) AS bc, ROWID AS ri FROM L GROUP BY ROWID;"
      ],
      "inputs": [
        {"topic": "LEFT", "key": "a", "value": {"B": 100}, "timestamp": 11},
        {"topic": "LEFT", "key": "b", "value": {"B": 100}, "timestamp": 11},
        {"topic": "LEFT", "key": "c", "value": {"B": 100}, "timestamp": 11}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "a", "value": {"BC": 1}, "timestamp": 11},
        {"topic": "OUTPUT", "key": "b", "value": {"BC": 1}, "timestamp": 11},
        {"topic": "OUTPUT", "key": "c", "value": {"BC": 1}, "timestamp": 11}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "schema": "ri BYTES KEY, bc BIGINT"}
        ]
      }
    }
  ]
}