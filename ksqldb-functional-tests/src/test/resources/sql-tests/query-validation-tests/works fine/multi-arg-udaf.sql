--@test: multi-arg-udaf - missing required initial arg
--@expected.error: io.confluent.ksql.util.KsqlStatementException
--@expected.message: Function 'MULTI_ARG' does not accept parameters (BIGINT, STRING).
CREATE STREAM INPUT (ID BIGINT KEY, FIRST bigint, SECOND string) WITH (kafka_topic='input_topic', value_format='JSON');
CREATE TABLE OUTPUT as SELECT id, MULTI_ARG(FIRST, SECOND) as RESULT FROM INPUT group by id;
--@test: multi-arg-udaf - missing first argument
--@expected.error: io.confluent.ksql.util.KsqlStatementException
--@expected.message: Function 'MULTI_ARG' does not accept parameters (STRING, INTEGER, STRING, STRING, STRING).
CREATE STREAM INPUT (ID BIGINT KEY, FIRST bigint, SECOND string) WITH (kafka_topic='input_topic', value_format='JSON');
CREATE TABLE OUTPUT as SELECT id, MULTI_ARG(SECOND, 5, '10', '20', '3') as RESULT FROM INPUT group by id;
--@test: multi-arg-udaf - missing second argument
--@expected.error: io.confluent.ksql.util.KsqlStatementException
--@expected.message: Function 'MULTI_ARG' does not accept parameters (BIGINT, INTEGER, STRING, STRING, STRING).
CREATE STREAM INPUT (ID BIGINT KEY, FIRST bigint, SECOND string) WITH (kafka_topic='input_topic', value_format='JSON');
CREATE TABLE OUTPUT as SELECT id, MULTI_ARG(FIRST, 5, '10', '20', '3') as RESULT FROM INPUT group by id;
--@test: multi-arg-udaf - all arguments
CREATE STREAM INPUT (ID BIGINT KEY, FIRST bigint, SECOND string) WITH (kafka_topic='input_topic', value_format='JSON');
CREATE TABLE OUTPUT as SELECT id, MULTI_ARG(FIRST, SECOND, 5, '10', '20', '3') as RESULT FROM INPUT group by id;
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, 6, 'hi');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 2, 'a');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, NULL, 'hello');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 5, 'world');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, 5, NULL);
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 3, 'test');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 2, 'testing');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, 21, 'aggregate');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, NULL, 'function');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 3, 'ksql');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 6, 'test');
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 18);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 13);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 23);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 23);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 28);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 30);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 39);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 58);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 47);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 54);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 64);

--@test: multi-arg-udaf - regular arg literal
CREATE STREAM INPUT (ID BIGINT KEY, FIRST bigint, SECOND string) WITH (kafka_topic='input_topic', value_format='JSON');
CREATE TABLE OUTPUT as SELECT id, MULTI_ARG(FIRST, 'hello', 5, '10', '20', '3') as RESULT FROM INPUT group by id;
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, 6, 'hi');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 2, 'a');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, NULL, 'hello');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 5, 'world');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, 5, NULL);
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 3, 'test');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 2, 'testing');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, 21, 'aggregate');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, NULL, 'function');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 3, 'ksql');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 6, 'test');
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 21);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 17);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 26);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 27);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 36);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 35);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 42);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 62);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 47);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 55);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 66);

--@test: multi-arg-udaf - no variadic args
CREATE STREAM INPUT (ID BIGINT KEY, FIRST bigint, SECOND string) WITH (kafka_topic='input_topic', value_format='JSON');
CREATE TABLE OUTPUT as SELECT id, MULTI_ARG(FIRST, SECOND, 5) as RESULT FROM INPUT group by id;
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, 6, 'hi');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 2, 'a');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, NULL, 'hello');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 5, 'world');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, 5, NULL);
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 3, 'test');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 2, 'testing');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (0, 21, 'aggregate');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, NULL, 'function');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 3, 'ksql');
INSERT INTO `INPUT` (ID, FIRST, SECOND) VALUES (100, 6, 'test');
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 13);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 8);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 18);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 18);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 23);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 25);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 34);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 53);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 42);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 49);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 59);

--@test: multi-arg-udaf - all arguments (four cols)
CREATE STREAM INPUT (ID BIGINT KEY, FIRST bigint, SECOND string, THIRD string, FOURTH string) WITH (kafka_topic='input_topic', value_format='JSON');
CREATE TABLE OUTPUT as SELECT id, FOUR_ARG(FIRST, SECOND, THIRD, FOURTH, 5, '10', '20', '3') as RESULT FROM INPUT group by id;
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH) VALUES (0, 6, 'hi', 'apples', NULL);
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH) VALUES (100, 2, 'a', 'oranges', 'Mercury');
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH) VALUES (0, NULL, 'hello', 'bananas', 'Venus');
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH) VALUES (100, 5, 'world', 'peaches', 'Earth');
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH) VALUES (0, 5, NULL, 'grapes', 'Mars');
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH) VALUES (100, 3, 'test', NULL, 'Asteroid Belt');
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH) VALUES (100, 2, 'testing', 'strawberries', 'Jupiter');
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH) VALUES (0, 21, 'aggregate', 'avocados', 'Saturn');
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH) VALUES (100, NULL, 'function', 'pears', 'Uranus');
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH) VALUES (100, 3, 'ksql', 'plums', 'Neptune');
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH) VALUES (100, 6, 'test', 'oranges', 'Pluto');
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 24);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 27);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 41);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 49);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 56);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 69);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 97);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 100);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 116);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 135);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 157);

--@test: multi-arg-udaf - all arguments (five cols)
CREATE STREAM INPUT (ID BIGINT KEY, FIRST bigint, SECOND string, THIRD string, FOURTH string, FIFTH integer) WITH (kafka_topic='input_topic', value_format='JSON');
CREATE TABLE OUTPUT as SELECT id, FIVE_ARG(FIRST, SECOND, THIRD, FOURTH, FIFTH, 5, '10', '20', '3') as RESULT FROM INPUT group by id;
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH, FIFTH) VALUES (0, 6, 'hi', 'apples', NULL, 9);
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH, FIFTH) VALUES (100, 2, 'a', 'oranges', 'Mercury', NULL);
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH, FIFTH) VALUES (0, NULL, 'hello', 'bananas', 'Venus', 1);
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH, FIFTH) VALUES (100, 5, 'world', 'peaches', 'Earth', 200);
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH, FIFTH) VALUES (0, 5, NULL, 'grapes', 'Mars', -4);
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH, FIFTH) VALUES (100, 3, 'test', NULL, 'Asteroid Belt', 1);
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH, FIFTH) VALUES (100, 2, 'testing', 'strawberries', 'Jupiter', 10);
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH, FIFTH) VALUES (0, 21, 'aggregate', 'avocados', 'Saturn', 2);
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH, FIFTH) VALUES (100, NULL, 'function', 'pears', 'Uranus', 123);
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH, FIFTH) VALUES (100, 3, 'ksql', 'plums', 'Neptune', 45);
INSERT INTO `INPUT` (ID, FIRST, SECOND, THIRD, FOURTH, FIFTH) VALUES (100, 6, 'test', 'oranges', 'Pluto', -2);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 33);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 27);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 51);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 249);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 62);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 270);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 308);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (0, 108);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 450);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 514);
ASSERT VALUES `OUTPUT` (ID, RESULT) VALUES (100, 534);

