--@test: math - exp
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, exp(i) i, exp(l) l, exp(d) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-1, -2, -3.0);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (1, 2, 3.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.36787944117144233, 0.1353352832366127, 0.049787068367863944);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.0, 1.0, 1.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (2.718281828459045, 7.38905609893065, 20.085536923187668);

--@test: math - ln
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, ln(i) i, ln(l) l, ln(d) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-1, -2, -3.0);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (1, 2, 3.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NaN, NaN, NaN);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-Infinity, -Infinity, -Infinity);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.6931471805599453, 1.0986122886681098);

--@test: math - sqrt
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, sqrt(i) i, sqrt(l) l, sqrt(d) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-1, -2, -3.0);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (1, 2, 3.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NaN, NaN, NaN);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.0, 1.4142135623730951, 1.7320508075688772);

--@test: math - sign
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, sign(i) i, sign(l) l, sign(d) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-1, -2, -3.0);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (1, 2, 3.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-1, -1, -1);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0, 0, 0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1, 1, 1);

--@test: math - floor
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE, b DECIMAL(2,1)) WITH (kafka_topic='input', value_format='AVRO');
CREATE STREAM OUTPUT AS SELECT K, floor(i) i, floor(l) l, floor(d) d, floor(b) b FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d, b) VALUES (0, 0, 0.0, 0.0);
INSERT INTO `INPUT` (i, l, d, b) VALUES (1, 1, 1.0, 1.0);
INSERT INTO `INPUT` (i, l, d, b) VALUES (1, 1, 1.1, 1.1);
INSERT INTO `INPUT` (i, l, d, b) VALUES (1, 1, 1.5, 1.5);
INSERT INTO `INPUT` (i, l, d, b) VALUES (1, 1, 1.7, 1.7);
INSERT INTO `INPUT` (i, l, d, b) VALUES (1, 1, 2.0, 2.0);
INSERT INTO `INPUT` (i, l, d, b) VALUES (-1, -1, -1.0, -1.0);
INSERT INTO `INPUT` (i, l, d, b) VALUES (-1, -1, -1.1, -1.1);
INSERT INTO `INPUT` (i, l, d, b) VALUES (-1, -1, -1.5, -1.5);
INSERT INTO `INPUT` (i, l, d, b) VALUES (-1, -1, -1.7, -1.7);
INSERT INTO `INPUT` (i, l, d, b) VALUES (-1, -1, -2.0, -2.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (NULL, NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (0, 0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 1, 1.0, 1.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 1, 1.0, 1.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 1, 1.0, 1.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 1, 1.0, 1.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 1, 2.0, 2.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (-1, -1, -1.0, -1.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (-1, -1, -2.0, -2.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (-1, -1, -2.0, -2.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (-1, -1, -2.0, -2.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (-1, -1, -2.0, -2.0);

--@test: math - calculate CEIL function
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE, b DECIMAL(2,1)) WITH (kafka_topic='input', value_format='AVRO');
CREATE STREAM OUTPUT AS SELECT K, ceil(i) i, ceil(l) l, ceil(d) d, ceil(b) b FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d, b) VALUES (0, 0, 0.0, 0.0);
INSERT INTO `INPUT` (i, l, d, b) VALUES (1, 1, 1.0, 1.0);
INSERT INTO `INPUT` (i, l, d, b) VALUES (1, 1, 1.1, 1.1);
INSERT INTO `INPUT` (i, l, d, b) VALUES (1, 1, 1.5, 1.5);
INSERT INTO `INPUT` (i, l, d, b) VALUES (1, 1, 1.7, 1.7);
INSERT INTO `INPUT` (i, l, d, b) VALUES (1, 1, 2.0, 2.0);
INSERT INTO `INPUT` (i, l, d, b) VALUES (-1, -1, -1.0, -1.0);
INSERT INTO `INPUT` (i, l, d, b) VALUES (-1, -1, -1.1, -1.1);
INSERT INTO `INPUT` (i, l, d, b) VALUES (-1, -1, -1.5, -1.5);
INSERT INTO `INPUT` (i, l, d, b) VALUES (-1, -1, -1.7, -1.7);
INSERT INTO `INPUT` (i, l, d, b) VALUES (-1, -1, -2.0, -2.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (NULL, NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (0, 0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 1, 1.0, 1.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 1, 2.0, 2.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 1, 2.0, 2.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 1, 2.0, 2.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 1, 2.0, 2.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (-1, -1, -1.0, -1.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (-1, -1, -1.0, -1.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (-1, -1, -1.0, -1.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (-1, -1, -1.0, -1.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (-1, -1, -2.0, -2.0);

--@test: math - abs
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE, b DECIMAL(2,1)) WITH (kafka_topic='input', value_format='AVRO');
CREATE STREAM OUTPUT AS SELECT K, abs(i) i, abs(l) l, abs(d) d, abs(b) b FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d, b) VALUES (-1, -2, -3.1, -3.2);
INSERT INTO `INPUT` (i, l, d, b) VALUES (0, 0, 0.0, 0.0);
INSERT INTO `INPUT` (i, l, d, b) VALUES (1, 2, 3.3, 3.4);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (NULL, NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 2, 3.1, 3.2);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (0, 0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D, B) VALUES (1, 2, 3.3, 3.4);

--@test: math - round
CREATE STREAM test (K STRING KEY, v DOUBLE) WITH (kafka_topic='test_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, ROUND(v) as R0, ROUND(v, 0) as R00, ROUND(v, 1) as R1, ROUND(v, 2) as R2, ROUND(v, 10) as R10, ROUND(v , -1) as 1R , ROUND(v , -2) as 2R  FROM test;
INSERT INTO `TEST` (v) VALUES (1.2);
INSERT INTO `TEST` (v) VALUES (1.7);
INSERT INTO `TEST` (v) VALUES (1.5);
INSERT INTO `TEST` (v) VALUES (3);
INSERT INTO `TEST` (v) VALUES (1.234567);
INSERT INTO `TEST` (v) VALUES (0);
INSERT INTO `TEST` (v) VALUES (111);
INSERT INTO `TEST` (v) VALUES (NULL);
INSERT INTO `TEST` (v) VALUES (-1.1);
INSERT INTO `TEST` (v) VALUES (-1.5);
INSERT INTO `TEST` (v) VALUES (-1.7);
INSERT INTO `TEST` (v) VALUES (12345.678);
INSERT INTO `TEST` (v) VALUES (-12345.678);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (1, 1.0, 1.2, 1.2, 1.2, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (2, 2.0, 1.7, 1.7, 1.7, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (2, 2.0, 1.5, 1.5, 1.5, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (3, 3.0, 3.0, 3.0, 3.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (1, 1.0, 1.2, 1.23, 1.234567, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (111, 111.0, 111.0, 111.0, 111.0, 110.0, 100.0);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (NULL, NULL, NULL, NULL, NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (-1, -1.0, -1.1, -1.1, -1.1, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (-1, -1.0, -1.5, -1.5, -1.5, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (-2, -2.0, -1.7, -1.7, -1.7, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (12346, 12346.0, 12345.7, 12345.68, 12345.678, 12350.0, 12300.0);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (-12346, -12346.0, -12345.7, -12345.68, -12345.678, -12350.0, -12300.0);

--@test: math - round with large DECIMAL values - DELIMITED
CREATE STREAM test (ID STRING KEY, v DECIMAL(33, 16)) WITH (kafka_topic='test_topic', value_format='DELIMITED');
CREATE STREAM OUTPUT AS SELECT ID, ROUND(v) as R0, ROUND(v, 0) as R00, ROUND(v, 1) as R1, ROUND(v, 2) as R2, ROUND(v, 10) as R10, ROUND(v , -1) as 1R , ROUND(v , -2) as 2R  FROM test;
INSERT INTO `TEST` (V) VALUES (12345678987654321.2345678987654321);
ASSERT VALUES `OUTPUT` (R0, R00, R1, R2, R10, 1R, 2R) VALUES (12345678987654321, 12345678987654321.0000000000000000, 12345678987654321.2000000000000000, 12345678987654321.2300000000000000, 12345678987654321.2345678988000000, 12345678987654320.0000000000000000, 12345678987654300.0000000000000000);
ASSERT stream OUTPUT (ID STRING KEY, R0 DECIMAL(17,0), R00 DECIMAL(33,16), R1 DECIMAL(33,16), R2 DECIMAL(33,16), R10 DECIMAL(33,16), 1R DECIMAL(33,16), 2R DECIMAL(33,16)) WITH (KAFKA_TOPIC='OUTPUT');

--@test: math - round with large DECIMAL values - AVRO
CREATE STREAM test (ID STRING KEY, v DECIMAL(33, 16)) WITH (kafka_topic='test_topic', value_format='AVRO');
CREATE STREAM OUTPUT AS SELECT ID, ROUND(v) as R0, ROUND(v, 0) as R00 FROM test;
INSERT INTO `TEST` (v) VALUES (12345678987654321.2345678987654321);
ASSERT VALUES `OUTPUT` (R0, R00) VALUES (12345678987654321, 12345678987654321.0000000000000000);
ASSERT stream OUTPUT (ID STRING KEY, R0 DECIMAL(17,0), R00 DECIMAL(33,16)) WITH (KAFKA_TOPIC='OUTPUT');

--@test: math - round with large DECIMAL values - JSON
CREATE STREAM test (ID STRING KEY, v DECIMAL(33, 16)) WITH (kafka_topic='test_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT ID, ROUND(v) as R0, ROUND(v, 0) as R00 FROM test;
INSERT INTO `TEST` (v) VALUES (12345678987654321.2345678987654321);
ASSERT VALUES `OUTPUT` (R0, R00) VALUES (12345678987654321, 12345678987654321.0000000000000000);
ASSERT stream OUTPUT (ID STRING KEY, R0 DECIMAL(17,0), R00 DECIMAL(33,16)) WITH (KAFKA_TOPIC='OUTPUT');

--@test: math - acos regular cases
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT k, round(acos(i), 13) i, round(acos(l), 13) l, round(acos(d), 13) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (-1, -1, -0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (1, 1, 0.43);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (3.1415926535898, 3.1415926535898, 2.0152891037307);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.5707963267949, 1.5707963267949, 1.5707963267949);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 1.1263035498591);

--@test: math - acos edge cases
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT k, acos(i) i, acos(l) l, acos(d) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-2, -6, -1.1);
INSERT INTO `INPUT` (i, l, d) VALUES (2, 6, 1.1);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NaN, NaN, NaN);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NaN, NaN, NaN);

--@test: math - asin regular cases
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT k, round(asin(i), 13) i, round(asin(l), 13) l, round(asin(d), 13) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (-1, -1, -0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (1, 1, 0.43);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-1.5707963267949, -1.5707963267949, -0.4444927769358);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.5707963267949, 1.5707963267949, 0.4444927769358);

--@test: math - asin edge cases
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT k, asin(i) i, asin(l) l, asin(d) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-2, -6, -1.1);
INSERT INTO `INPUT` (i, l, d) VALUES (2, 6, 1.1);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NaN, NaN, NaN);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NaN, NaN, NaN);

--@test: math - atan
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, round(atan(i), 13) i, round(atan(l), 13) l, round(atan(d), 13) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-2, -6, -1.1);
INSERT INTO `INPUT` (i, l, d) VALUES (-1, -1, -0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (1, 1, 0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (2, 6, 1.1);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-1.1071487177941, -1.4056476493803, -0.8329812666744);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-0.7853981633974, -0.7853981633974, -0.4060980583176);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.7853981633974, 0.7853981633974, 0.4060980583176);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.1071487177941, 1.4056476493803, 0.8329812666744);

--@test: math - atan2
CREATE STREAM INPUT (K STRING KEY, iy INT, ix INT, ly BIGINT, lx BIGINT, dy DOUBLE, dx DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, round(atan2(iy, ix), 13) i, round(atan2(ly, lx), 13) l, round(atan2(dy, dx), 13) d FROM INPUT;
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (NULL, 1, NULL, 1, NULL, 0.45);
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (1, NULL, 1, NULL, 0.45, NULL);
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (-2, -3, -2, -2, -1.1, -0.24);
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (-2, 3, -2, 2, -1.1, 0.24);
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (-2, 0, -2, 0, -1.1, 0.0);
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (2, -3, 2, -2, 1.1, -0.24);
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (2, 3, 2, 2, 1.1, 0.24);
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (2, 0, 2, 0, 1.1, 0.0);
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (0, -3, 0, -2, 0, -0.24);
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (0, 3, 0, 2, 0, 0.24);
INSERT INTO `INPUT` (iy, ix, ly, lx, dy, dx) VALUES (0, 0, 0, 0, 0, 0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-2.5535900500422, -2.3561944901923, -1.7856117271966);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-0.5880026035476, -0.7853981633974, -1.3559809263932);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-1.5707963267949, -1.5707963267949, -1.5707963267949);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (2.5535900500422, 2.3561944901923, 1.7856117271966);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.5880026035476, 0.7853981633974, 1.3559809263932);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.5707963267949, 1.5707963267949, 1.5707963267949);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (3.1415926535898, 3.1415926535898, 3.1415926535898);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);

--@test: math - cos
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, round(cos(i), 13) i, round(cos(l), 13) l, round(cos(d), 13) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-7, -7, -9.1);
INSERT INTO `INPUT` (i, l, d) VALUES (-6, -6, -0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (6, 6, 0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (7, 7, 9.1);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.7539022543433, 0.7539022543433, -0.9477216021311);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.9601702866504, 0.9601702866504, 0.9089657496749);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.0, 1.0, 1.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.9601702866504, 0.9601702866504, 0.9089657496749);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.7539022543433, 0.7539022543433, -0.9477216021311);

--@test: math - sin
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, round(sin(i), 13) i, round(sin(l), 13) l, round(sin(d), 13) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-7, -7, -9.1);
INSERT INTO `INPUT` (i, l, d) VALUES (-6, -6, -0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (6, 6, 0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (7, 7, 9.1);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-0.6569865987188, -0.6569865987188, -0.3190983623494);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.2794154981989, 0.2794154981989, -0.4168708024292);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-0.2794154981989, -0.2794154981989, 0.4168708024292);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.6569865987188, 0.6569865987188, 0.3190983623494);

--@test: math - tan
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, round(tan(i), 13) i, round(tan(l), 13) l, round(tan(d), 13) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-7, -7, -9.1);
INSERT INTO `INPUT` (i, l, d) VALUES (-6, -6, -0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (6, 6, 0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (7, 7, 9.1);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-0.8714479827243, -0.8714479827243, 0.3367005264329);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.2910061913847, 0.2910061913847, -0.4586210234856);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-0.2910061913847, -0.2910061913847, 0.4586210234856);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.8714479827243, 0.8714479827243, -0.3367005264329);

--@test: math - cot regular cases
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, round(cot(i), 13) i, round(cot(l), 13) l, round(cot(d), 13) d FROM INPUT;
INSERT INTO `INPUT` (I, L, D) VALUES (-7, -7, -9.1);
INSERT INTO `INPUT` (I, L, D) VALUES (-6, -6, -0.43);
INSERT INTO `INPUT` (I, L, D) VALUES (6, 6, 0.43);
INSERT INTO `INPUT` (I, L, D) VALUES (7, 7, 9.1);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-1.1475154224051, -1.1475154224051, 2.9699983263892);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (3.4363530041801, 3.4363530041801, -2.1804495406685);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-3.4363530041801, -3.4363530041801, 2.1804495406685);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.1475154224051, 1.1475154224051, -2.9699983263892);

--@test: math - cot edge cases
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, cot(i) i, cot(l) l, cot(d) d FROM INPUT;
INSERT INTO `INPUT` (I, L, D) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (I, L, D) VALUES (0, 0, 0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (Infinity, Infinity, Infinity);

--@test: math - cosh
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, round(cosh(i), 13) i, round(cosh(l), 13) l, round(cosh(d), 13) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-7, -7, -9.1);
INSERT INTO `INPUT` (i, l, d) VALUES (-6, -6, -0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (6, 6, 0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (7, 7, 9.1);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (548.317035155212, 548.317035155212, 4477.646407574158);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (201.7156361224559, 201.7156361224559, 1.0938833091358);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.0, 1.0, 1.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (201.7156361224559, 201.7156361224559, 1.0938833091358);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (548.317035155212, 548.317035155212, 4477.646407574158);

--@test: math - sinh
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, round(sinh(i), 13) i, round(sinh(l), 13) l, round(sinh(d), 13) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-7, -7, -9.1);
INSERT INTO `INPUT` (i, l, d) VALUES (-6, -6, -0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (6, 6, 0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (7, 7, 9.1);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-548.3161232732465, -548.3161232732465, -4477.64629590835);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-201.7131573702792, -201.7131573702792, -0.4433742144125);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (201.7131573702792, 201.7131573702792, 0.4433742144125);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (548.3161232732465, 548.3161232732465, 4477.64629590835);

--@test: math - tanh
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, round(tanh(i), 13) i, round(tanh(l), 13) l, round(tanh(d), 13) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-7, -7, -9.1);
INSERT INTO `INPUT` (i, l, d) VALUES (-6, -6, -0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (6, 6, 0.43);
INSERT INTO `INPUT` (i, l, d) VALUES (7, 7, 9.1);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-0.9999983369439, -0.9999983369439, -0.9999999750615);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-0.9999877116508, -0.9999877116508, -0.4053213086895);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.9999877116508, 0.9999877116508, 0.4053213086895);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.9999983369439, 0.9999983369439, 0.9999999750615);

--@test: math - degrees
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, round(degrees(i), 12) i, round(degrees(l), 12) l, round(degrees(d), 12) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-2, -2, -1.2345);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (2, 2, 1.2345);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-114.591559026165, -114.591559026165, -70.7316398089);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (114.591559026165, 114.591559026165, 70.7316398089);

--@test: math - radians
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, round(radians(i), 13) i, round(radians(l), 13) l, round(radians(d), 13) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-114, -114, -70.73163980890013);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (114, 114, 70.73163980890013);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-1.9896753472735, -1.9896753472735, -1.2345);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.9896753472735, 1.9896753472735, 1.2345);

--@test: math - pi
CREATE STREAM INPUT (IGNORED INT) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT pi() AS VAL FROM INPUT;
INSERT INTO `INPUT` (ignored) VALUES (99);
ASSERT VALUES `OUTPUT` (val) VALUES (3.141592653589793);

--@test: math - cbrt
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, cbrt(i) i, cbrt(l) l, cbrt(d) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-8, -3, -1.0);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (8, 3, 1.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-2.0, -1.4422495703074083, -1.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (2.0, 1.4422495703074083, 1.0);

--@test: math - power
CREATE STREAM INPUT (K STRING KEY, ib INT, ie INT, lb BIGINT, le BIGINT, db DOUBLE, de DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, power(ib, ie) i, power(lb, le) l, power(db, de) d FROM INPUT;
INSERT INTO `INPUT` (ib, ie, lb, le, db, de) VALUES (NULL, 13, NULL, 13, NULL, 13.0);
INSERT INTO `INPUT` (ib, ie, lb, le, db, de) VALUES (13, NULL, 13, NULL, 13.0, NULL);
INSERT INTO `INPUT` (ib, ie, lb, le, db, de) VALUES (15, -1, 15, -1, 15.0, -1.0);
INSERT INTO `INPUT` (ib, ie, lb, le, db, de) VALUES (15, 0, 15, 0, 15.0, 0.0);
INSERT INTO `INPUT` (ib, ie, lb, le, db, de) VALUES (0, 0, 0, 0, 0.0, 0.0);
INSERT INTO `INPUT` (ib, ie, lb, le, db, de) VALUES (15, 13, 15, 13, 15.0, 13.0);
INSERT INTO `INPUT` (ib, ie, lb, le, db, de) VALUES (-15, 2, -15, 2, -15.0, 2.0);
INSERT INTO `INPUT` (ib, ie, lb, le, db, de) VALUES (0, 2, 0, 2, 0.0, 2.0);
INSERT INTO `INPUT` (ib, ie, lb, le, db, de) VALUES (1, 2, 1, 2, 1.0, 2.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.06666666666666667, 0.06666666666666667, 0.06666666666666667);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.0, 1.0, 1.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.0, 1.0, 1.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1946195068359375, 1946195068359375, 1946195068359375);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (225.0, 225.0, 225.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (1.0, 1.0, 1.0);

--@test: math - log-base-10
CREATE STREAM INPUT (K STRING KEY, i INT, l BIGINT, d DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, log(i) i, log(l) l, log(d) d FROM INPUT;
INSERT INTO `INPUT` (i, l, d) VALUES (NULL, NULL, NULL);
INSERT INTO `INPUT` (i, l, d) VALUES (-13, -13, -13.0);
INSERT INTO `INPUT` (i, l, d) VALUES (0, 0, 0.0);
INSERT INTO `INPUT` (i, l, d) VALUES (1, 1, 1.0);
INSERT INTO `INPUT` (i, l, d) VALUES (13, 13, 13.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NaN, NaN, NaN);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-Infinity, -Infinity, -Infinity);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (2.5649493574615367, 2.5649493574615367, 2.5649493574615367);

--@test: math - log-custom-base
CREATE STREAM INPUT (K STRING KEY, ib INT, iv INT, lb BIGINT, lv BIGINT, db DOUBLE, dv DOUBLE) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, log(ib, iv) i, log(lb, lv) l, log(db, dv) d FROM INPUT;
INSERT INTO `INPUT` (ib, iv, lb, lv, db, dv) VALUES (NULL, 13, NULL, 13, NULL, 13.0);
INSERT INTO `INPUT` (ib, iv, lb, lv, db, dv) VALUES (13, NULL, 13, NULL, 13.0, NULL);
INSERT INTO `INPUT` (ib, iv, lb, lv, db, dv) VALUES (15, 13, 15, 13, 15.0, 13.0);
INSERT INTO `INPUT` (ib, iv, lb, lv, db, dv) VALUES (15, 1, 15, 1, 15.0, 1.0);
INSERT INTO `INPUT` (ib, iv, lb, lv, db, dv) VALUES (15, 0, 15, 0, 15.0, 0.0);
INSERT INTO `INPUT` (ib, iv, lb, lv, db, dv) VALUES (15, -13, 15, -13, 15.0, -13.0);
INSERT INTO `INPUT` (ib, iv, lb, lv, db, dv) VALUES (-15, 13, -15, 13, -15.0, 13.0);
INSERT INTO `INPUT` (ib, iv, lb, lv, db, dv) VALUES (0, 13, 0, 13, 0.0, 13.0);
INSERT INTO `INPUT` (ib, iv, lb, lv, db, dv) VALUES (1, 13, 1, 13, 1.0, 13.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.9471572411831843, 0.9471572411831843, 0.9471572411831843);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (0.0, 0.0, 0.0);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (-Infinity, -Infinity, -Infinity);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NaN, NaN, NaN);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NaN, NaN, NaN);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NaN, NaN, NaN);
ASSERT VALUES `OUTPUT` (I, L, D) VALUES (NaN, NaN, NaN);

