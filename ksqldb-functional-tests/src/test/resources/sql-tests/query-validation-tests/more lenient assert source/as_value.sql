--@test: as_value - key column
CREATE STREAM INPUT (ID INT KEY, V0 INT, V1 INT) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT ID, AS_VALUE(ID) AS ID_COPY, V1 FROM INPUT;
INSERT INTO `INPUT` (ID, V0, V1) VALUES (1, 2, 3);
ASSERT VALUES `OUTPUT` (ID, ID_COPY, V1) VALUES (1, 1, 3);
ASSERT stream OUTPUT (ID INT KEY, ID_COPY INT, V1 INT) WITH (KAFKA_TOPIC='OUTPUT');

--@test: as_value - value column
CREATE STREAM INPUT (ID INT KEY, V0 INT, V1 INT) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT ID, AS_VALUE(V0) FROM INPUT;
INSERT INTO `INPUT` (ID, V0, V1) VALUES (1, 2, 3);
ASSERT VALUES `OUTPUT` (ID, KSQL_COL_0) VALUES (1, 2);
ASSERT stream OUTPUT (ID INT KEY, KSQL_COL_0 INT) WITH (KAFKA_TOPIC='OUTPUT');

--@test: as_value - expression
CREATE STREAM INPUT (ID INT KEY, V0 INT, V1 INT) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT ID, AS_VALUE(V0 + V1) FROM INPUT;
INSERT INTO `INPUT` (ID, V0, V1) VALUES (1, 2, 3);
ASSERT VALUES `OUTPUT` (ID, KSQL_COL_0) VALUES (1, 5);
ASSERT stream OUTPUT (ID INT KEY, KSQL_COL_0 INT) WITH (KAFKA_TOPIC='OUTPUT');

--@test: as_value - partition by
CREATE STREAM INPUT (ID INT KEY, V0 INT, V1 INT) WITH (kafka_topic='input', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT * FROM INPUT PARTITION BY AS_VALUE(ID);
INSERT INTO `INPUT` (ID, V0, V1) VALUES (1, 2, 3);
ASSERT VALUES `OUTPUT` (KSQL_COL_0, V0, V1, ID) VALUES (1, 2, 3, 1);
ASSERT stream OUTPUT (KSQL_COL_0 INT KEY, V0 INT, V1 INT, ID INT) WITH (KAFKA_TOPIC='OUTPUT');

--@test: as_value - group by
CREATE STREAM INPUT (ID INT KEY, V0 INT, V1 INT) WITH (kafka_topic='input', value_format='JSON');
CREATE TABLE OUTPUT AS SELECT AS_VALUE(ID) AS K, COUNT(1) FROM INPUT GROUP BY AS_VALUE(ID);
INSERT INTO `INPUT` (ID, V0, V1) VALUES (1, 2, 3);
ASSERT VALUES `OUTPUT` (K, KSQL_COL_0) VALUES (1, 1);
ASSERT table OUTPUT (K INT PRIMARY KEY, KSQL_COL_0 BIGINT) WITH (KAFKA_TOPIC='OUTPUT');

--@test: as_value - join
CREATE STREAM I1 (ID INT KEY, V0 INT, V1 INT) WITH (kafka_topic='i1', value_format='JSON');
CREATE TABLE I2 (ID INT PRIMARY KEY, V0 INT, V1 INT) WITH (kafka_topic='i2', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT * FROM I1 JOIN I2 ON AS_VALUE(I1.ID) = I2.ID;
INSERT INTO `I2` (ID, V0, V1) VALUES (1, 2, 3);
INSERT INTO `I1` (ID, V0, V1) VALUES (1, 2, 3);
ASSERT VALUES `OUTPUT` (I2_ID, I1_ID, I1_V0, I1_V1, I2_V0, I2_V1) VALUES (1, 1, 2, 3, 2, 3);
ASSERT stream OUTPUT (I2_ID INT KEY, I1_ID INT, I1_V0 INT, I1_V1 INT, I2_V0 INT, I2_V1 INT) WITH (KAFKA_TOPIC='OUTPUT');

--@test: as_value - BOOLEAN
CREATE STREAM INPUT (ID BOOLEAN KEY, V0 INT, V1 INT) WITH (kafka_topic='input', format='JSON');
CREATE STREAM OUTPUT AS SELECT ID, AS_VALUE(ID) AS ID_COPY, V1 FROM INPUT;
INSERT INTO `INPUT` (ID, V0, V1) VALUES (true, 2, 3);
ASSERT VALUES `OUTPUT` (ID, ID_COPY, V1) VALUES (true, true, 3);
ASSERT stream OUTPUT (ID BOOLEAN KEY, ID_COPY BOOLEAN, V1 INT) WITH (KAFKA_TOPIC='OUTPUT');

--@test: as_value - DECIMAL
CREATE STREAM INPUT (ID DECIMAL(4,2) KEY, V0 INT, V1 INT) WITH (kafka_topic='input', format='JSON');
CREATE STREAM OUTPUT AS SELECT ID, AS_VALUE(ID) AS ID_COPY, V1 FROM INPUT;
INSERT INTO `INPUT` (ID, V0, V1) VALUES (12.30, 2, 3);
ASSERT VALUES `OUTPUT` (ID, ID_COPY, V1) VALUES (12.30, 12.30, 3);
ASSERT stream OUTPUT (ID DECIMAL(4,2) KEY, ID_COPY DECIMAL(4,2), V1 INT) WITH (KAFKA_TOPIC='OUTPUT');

--@test: as_value - ARRAY
CREATE STREAM INPUT (ID ARRAY<VARCHAR> KEY, V0 INT, V1 INT) WITH (kafka_topic='input', format='JSON');
CREATE STREAM OUTPUT AS SELECT ID, AS_VALUE(ID) AS ID_COPY, V1 FROM INPUT;
INSERT INTO `INPUT` (ID, V0, V1) VALUES (ARRAY['foo'], 2, 3);
ASSERT VALUES `OUTPUT` (ID, ID_COPY, V1) VALUES (ARRAY['foo'], ARRAY['foo'], 3);
ASSERT stream OUTPUT (ID ARRAY<VARCHAR> KEY, ID_COPY ARRAY<VARCHAR>, V1 INT) WITH (KAFKA_TOPIC='OUTPUT');

--@test: as_value - STRUCT
CREATE STREAM INPUT (ID STRUCT<F1 VARCHAR> KEY, V0 INT, V1 INT) WITH (kafka_topic='input', format='JSON');
CREATE STREAM OUTPUT AS SELECT ID, AS_VALUE(ID) AS ID_COPY, V1 FROM INPUT;
INSERT INTO `INPUT` (ID, V0, V1) VALUES (STRUCT(F1:='foo'), 2, 3);
ASSERT VALUES `OUTPUT` (ID, ID_COPY, V1) VALUES (STRUCT(F1:='foo'), STRUCT(F1:='foo'), 3);
ASSERT stream OUTPUT (ID STRUCT<F1 VARCHAR> KEY, ID_COPY STRUCT<F1 VARCHAR>, V1 INT) WITH (KAFKA_TOPIC='OUTPUT');

