--@test: select-struct-all - value struct colum
CREATE STREAM INPUT (k1 INT KEY, v1 STRUCT<a INT, b INT>) WITH (kafka_topic='test_topic', format='JSON');
CREATE STREAM OUTPUT_1 AS SELECT k1, v1->* FROM INPUT;
CREATE STREAM OUTPUT_2 AS SELECT I.`K1`, I.`V1`->* FROM INPUT I;
CREATE STREAM OUTPUT_3 AS SELECT k1, v1->a AS A_FIELD, v1->b AS B_FIELD, v1->* FROM INPUT;
INSERT INTO `INPUT` (K1, V1) VALUES (1, STRUCT(a:=1, b:=2));
ASSERT VALUES `OUTPUT_1` (K1, A, B) VALUES (1, 1, 2);
ASSERT VALUES `OUTPUT_2` (K1, A, B) VALUES (1, 1, 2);
ASSERT VALUES `OUTPUT_3` (K1, A_FIELD, B_FIELD, A, B) VALUES (1, 1, 2, 1, 2);
ASSERT stream OUTPUT_1 (K1 INT KEY, A INT, B INT) WITH (KAFKA_TOPIC='OUTPUT_1');
ASSERT stream OUTPUT_2 (K1 INT KEY, A INT, B INT) WITH (KAFKA_TOPIC='OUTPUT_2');
ASSERT stream OUTPUT_3 (K1 INT KEY, A_FIELD INT, B_FIELD INT, A INT, B INT) WITH (KAFKA_TOPIC='OUTPUT_3');

--@test: select-struct-all - value nested struct field
CREATE STREAM INPUT (v1 STRUCT<a STRUCT<b STRUCT<f1 INT, f2 STRING>>>) WITH (kafka_topic='test_topic', value_format='JSON');
CREATE STREAM OUTPUT_1 AS SELECT v1->a->b->* FROM INPUT;
CREATE STREAM OUTPUT_2 AS SELECT v1->a->* FROM INPUT;
CREATE STREAM OUTPUT_3 AS SELECT v1->* FROM INPUT;
INSERT INTO `INPUT` (V1) VALUES (STRUCT(a:=STRUCT(b:=STRUCT(f1:=1, f2:='2'))));
ASSERT VALUES `OUTPUT_1` (F1, F2) VALUES (1, '2');
ASSERT VALUES `OUTPUT_2` (B) VALUES (STRUCT(F1:=1, F2:='2'));
ASSERT VALUES `OUTPUT_3` (A) VALUES (STRUCT(B:=STRUCT(F1:=1, F2:='2')));
ASSERT stream OUTPUT_1 (F1 INT, F2 STRING) WITH (KAFKA_TOPIC='OUTPUT_1');
ASSERT stream OUTPUT_2 (B STRUCT<F1 INT, F2 STRING>) WITH (KAFKA_TOPIC='OUTPUT_2');
ASSERT stream OUTPUT_3 (A STRUCT<B STRUCT<F1 INT, F2 STRING>>) WITH (KAFKA_TOPIC='OUTPUT_3');

--@test: select-struct-all - key struct colum
CREATE STREAM INPUT (k1 STRUCT<a INT, b INT> KEY, v1 INT) WITH (kafka_topic='test_topic', format='JSON');
CREATE STREAM OUTPUT AS SELECT k1, k1->*, v1 FROM INPUT;
INSERT INTO `INPUT` (K1, v1) VALUES (STRUCT(a:=1, b:=2), 1);
ASSERT VALUES `OUTPUT` (K1, A, B, V1) VALUES (STRUCT(A:=1, B:=2), 1, 2, 1);
ASSERT stream OUTPUT (K1 STRUCT<A INT, B INT> KEY, A INT, B INT, V1 INT) WITH (KAFKA_TOPIC='OUTPUT');

--@test: select-struct-all - struct fields with back quoted strings
CREATE STREAM INPUT (v1 STRUCT<`f 1` INT, f2 INT, `f 3` INT>) WITH (kafka_topic='test_topic', format='JSON');
CREATE STREAM OUTPUT AS SELECT v1->* FROM INPUT;
INSERT INTO `INPUT` (V1) VALUES (STRUCT(`f 1`:=1, f2:=2, `f 3`:=3));
ASSERT VALUES `OUTPUT` (`f 1`, F2, `f 3`) VALUES (1, 2, 3);
ASSERT stream OUTPUT (`f 1` INT, F2 INT, `f 3` INT) WITH (KAFKA_TOPIC='OUTPUT');

--@test: select-struct-all - read all struct fields and insert into another stream
CREATE STREAM INPUT (v1 STRUCT<a INT, b INT>) WITH (kafka_topic='test_topic', format='JSON');
CREATE STREAM OUTPUT (A INT, B INT) WITH (kafka_topic='OUTPUT', format='JSON');
INSERT INTO OUTPUT SELECT v1->* FROM INPUT;
INSERT INTO `INPUT` (V1) VALUES (STRUCT(a:=1, b:=2));
ASSERT VALUES `OUTPUT` (A, B) VALUES (1, 2);

--@test: select-struct-all - joins and struct all on projection
CREATE STREAM INPUT_1 (k1 INT KEY, v1 STRUCT<a INT, b INT>) WITH (kafka_topic='test_topic_1', format='JSON');
CREATE STREAM INPUT_2 (k1 INT KEY, v1 STRUCT<a INT, b INT>) WITH (kafka_topic='test_topic_2', format='JSON');
CREATE STREAM OUTPUT AS SELECT I1.k1, I1.v1->*, I2.v1->a AS I2_A, I2.v1->b AS I2_B FROM INPUT_1 I1 JOIN INPUT_2 I2 WITHIN (1 SECOND, 100 SECONDS) ON I1.k1 = I2.k1;
INSERT INTO `INPUT_1` (K1, V1) VALUES (1, STRUCT(a:=10, b:=11));
INSERT INTO `INPUT_2` (K1, V1) VALUES (1, STRUCT(a:=20, b:=21));
ASSERT VALUES `OUTPUT` (I1_K1, A, B, I2_A, I2_B) VALUES (1, 10, 11, 20, 21);

