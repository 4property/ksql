--@test: substring - do substring with strings with just pos - JSON
CREATE STREAM TEST (K STRING KEY, source VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, SUBSTRING(source, 6) AS SUBSTRING, SUBSTRING(CAST(null AS STRING), 1) AS NULL_STR, SUBSTRING(source, null) AS NULL_POS FROM TEST;
INSERT INTO `TEST` (source) VALUES ('some_string');
INSERT INTO `TEST` (source) VALUES ('another');
INSERT INTO `TEST` (source) VALUES ('short');
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS) VALUES ('string', NULL, NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS) VALUES ('er', NULL, NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS) VALUES ('', NULL, NULL);

--@test: substring - do substring with strings with just pos - PROTOBUF
CREATE STREAM TEST (K STRING KEY, source VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, SUBSTRING(source, 6) AS SUBSTRING, SUBSTRING(CAST(null AS STRING), 1) AS NULL_STR, SUBSTRING(source, null) AS NULL_POS FROM TEST;
INSERT INTO `TEST` (source) VALUES ('some_string');
INSERT INTO `TEST` (source) VALUES ('another');
INSERT INTO `TEST` (source) VALUES ('short');
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS) VALUES ('string', NULL, NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS) VALUES ('er', NULL, NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS) VALUES ('', NULL, NULL);

--@test: substring - do substring with bytes with just pos - JSON
CREATE STREAM TEST (K STRING KEY, source BYTES) WITH (kafka_topic='test_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, SUBSTRING(source, 6) AS SUBSTRING, SUBSTRING(source, null) AS NULL_POS FROM TEST;
INSERT INTO `TEST` (source) VALUES ('c29tZV9zdHJpbmc=');
INSERT INTO `TEST` (source) VALUES ('YW5vdGhlcg==');
INSERT INTO `TEST` (source) VALUES ('c2hvcnQ=');
INSERT INTO `TEST` (source) VALUES (NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_POS) VALUES ('c3RyaW5n', NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_POS) VALUES ('ZXI=', NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_POS) VALUES ('', NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_POS) VALUES (NULL, NULL);

--@test: substring - do substring with strings with pos and length - JSON
CREATE STREAM TEST (K STRING KEY, source VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, SUBSTRING(source, 6, 3) AS SUBSTRING, SUBSTRING(CAST(null AS STRING), 1) AS NULL_STR, SUBSTRING(source, null) AS NULL_POS, SUBSTRING(source, 6, null) AS NULL_LEN FROM TEST;
INSERT INTO `TEST` (source) VALUES ('some_string');
INSERT INTO `TEST` (source) VALUES ('another');
INSERT INTO `TEST` (source) VALUES ('short');
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS, NULL_LEN) VALUES ('str', NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS, NULL_LEN) VALUES ('er', NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS, NULL_LEN) VALUES ('', NULL, NULL, NULL);

--@test: substring - do substring with strings with pos and length - PROTOBUF
CREATE STREAM TEST (K STRING KEY, source VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, SUBSTRING(source, 6, 3) AS SUBSTRING, SUBSTRING(CAST(null AS STRING), 1) AS NULL_STR, SUBSTRING(source, null) AS NULL_POS, SUBSTRING(source, 6, null) AS NULL_LEN FROM TEST;
INSERT INTO `TEST` (source) VALUES ('some_string');
INSERT INTO `TEST` (source) VALUES ('another');
INSERT INTO `TEST` (source) VALUES ('short');
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS, NULL_LEN) VALUES ('str', NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS, NULL_LEN) VALUES ('er', NULL, NULL, NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_STR, NULL_POS, NULL_LEN) VALUES ('', NULL, NULL, NULL);

--@test: substring - do substring with bytes with pos and length - JSON
CREATE STREAM TEST (K STRING KEY, source BYTES) WITH (kafka_topic='test_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, SUBSTRING(source, 6, 3) AS SUBSTRING, SUBSTRING(source, null) AS NULL_POS, SUBSTRING(source, 6, null) AS NULL_LEN FROM TEST;
INSERT INTO `TEST` (source) VALUES ('c29tZV9zdHJpbmc=');
INSERT INTO `TEST` (source) VALUES ('YW5vdGhlcg==');
INSERT INTO `TEST` (source) VALUES ('c2hvcnQ=');
INSERT INTO `TEST` (source) VALUES (NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_POS, NULL_LEN) VALUES ('c3Ry', NULL, NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_POS, NULL_LEN) VALUES ('ZXI=', NULL, NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_POS, NULL_LEN) VALUES ('', NULL, NULL);
ASSERT VALUES `OUTPUT` (SUBSTRING, NULL_POS, NULL_LEN) VALUES (NULL, NULL, NULL);

--@test: substring - should default to current mode for new queries - JSON
CREATE STREAM TEST (K STRING KEY, source VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, SUBSTRING(source, 6) AS SUBSTRING FROM TEST;
INSERT INTO `TEST` (source) VALUES ('some_string');
ASSERT VALUES `OUTPUT` (SUBSTRING) VALUES ('string');

--@test: substring - should default to current mode for new queries - PROTOBUF
CREATE STREAM TEST (K STRING KEY, source VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');
CREATE STREAM OUTPUT AS SELECT K, SUBSTRING(source, 6) AS SUBSTRING FROM TEST;
INSERT INTO `TEST` (source) VALUES ('some_string');
ASSERT VALUES `OUTPUT` (SUBSTRING) VALUES ('string');

--@test: substring - in group by
CREATE STREAM TEST (K STRING KEY, source VARCHAR) WITH (kafka_topic='test_topic', value_format='DELIMITED');
CREATE TABLE OUTPUT AS SELECT SUBSTRING(source, 0, 2) AS Thing, COUNT(*) AS SUBSTRING FROM TEST GROUP BY SUBSTRING(source, 0, 2);
INSERT INTO `TEST` (SOURCE) VALUES ('some string');
INSERT INTO `TEST` (SOURCE) VALUES ('another string');
INSERT INTO `TEST` (SOURCE) VALUES ('some string again');
INSERT INTO `TEST` (SOURCE) VALUES ('another string again');
INSERT INTO `TEST` (SOURCE) VALUES ('some other string');
INSERT INTO `TEST` (SOURCE) VALUES ('the final string');
ASSERT VALUES `OUTPUT` (THING, SUBSTRING) VALUES ('so', 1);
ASSERT VALUES `OUTPUT` (THING, SUBSTRING) VALUES ('an', 1);
ASSERT VALUES `OUTPUT` (THING, SUBSTRING) VALUES ('so', 2);
ASSERT VALUES `OUTPUT` (THING, SUBSTRING) VALUES ('an', 2);
ASSERT VALUES `OUTPUT` (THING, SUBSTRING) VALUES ('so', 3);
ASSERT VALUES `OUTPUT` (THING, SUBSTRING) VALUES ('th', 1);

